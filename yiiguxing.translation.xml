<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <histories>
      <item value="apply Id" />
      <item value="office Supplies Service" />
      <item value="list" />
      <item value="supplies Logistics Service" />
      <item value="Gx Oa Supplies Logistics" />
      <item value="user Id" />
      <item value="Security Utils" />
      <item value="relation Distinct List" />
      <item value="supplies" />
      <item value="total Count" />
      <item value="bean Row Id" />
      <item value="Gx Oa Office Supplies Relation" />
      <item value="get Main Id" />
      <item value="office Supplies Relation Service" />
      <item value="res Map" />
      <item value="clear" />
      <item value="add All" />
      <item value="get Product Count" />
      <item value="process Act Data" />
      <item value="connect" />
      <item value="get Product Price" />
      <item value="restarted Main" />
      <item value="producing" />
      <item value="took" />
      <item value="get Office Apply Form Info" />
      <item value="result Data Map" />
      <item value="Hash Map" />
      <item value="uses Default Deflater" />
      <item value="Nacos Property Source Builder" />
      <item value="load Nacos Data" />
      <item value="discovery" />
      <item value="notifier" />
      <item value="apply" />
      <item value="equals" />
      <item value="Mobile Expand Param Vo" />
      <item value="reset" />
      <item value="mark" />
      <item value="@return &lt;code&gt;true&lt;code&gt; if this stream instance supports the mark and reset methods; &lt;code&gt;false&lt;code&gt; otherwise." />
      <item value="Tests if this input stream supports the &lt;code&gt;mark&lt;code&gt; and &lt;code&gt;reset&lt;code&gt; methods. Whether or not &lt;code&gt;mark&lt;code&gt; and &lt;code&gt;reset&lt;code&gt; are supported is an invariant property of a particular input stream instance. The &lt;code&gt;markSupported&lt;code&gt; method of &lt;code&gt;InputStream&lt;code&gt; returns &lt;code&gt;false&lt;code&gt;. @return &lt;code&gt;true&lt;code&gt; if this stream instance supports the mark and reset methods; &lt;code&gt;false&lt;code&gt; otherwise. @see java.io.InputStreammark(int) @see java.io.InputStreamreset()" />
      <item value="mark Supported" />
      <item value="Pushes back a byte by copying it to the front of the pushback buffer. After this method returns, the next byte to be read will have the value &lt;code&gt;(byte)b&lt;code&gt;. @param b the &lt;code&gt;int&lt;code&gt; value whose low-order byte is to be pushed back. @exception IOException If there is not enough room in the pushback buffer for the byte, or this input stream has been closed by invoking its {@link close()} method." />
      <item value="unread" />
      <item value="Type Descriptor" />
      <item value="convert If Necessary" />
      <item value="A &lt;code&gt;PushbackInputStream&lt;code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read." />
      <item value="Pushback Input Stream" />
      <item value="was expecting double-quote to start field name" />
      <item value="login User" />
      <item value="Performance testing notes (JDK 1.4, Jul03, scolebourne) Whitespace: Character.isWhitespace() is faster than WHITESPACE.indexOf() where WHITESPACE is a string of all whitespace characters Character access: String.charAt(n) versus toCharArray(), then array[n] String.charAt(n) is about 15% worse for a 10K string They are about equal for a length 50 string String.charAt(n) is about 4 times better for a length 3 string String.charAt(n) is best bet overall Append: String.concat about twice as fast as StringBuffer.append (not sure who tested this)" />
      <item value="Office Supplies Apply Sl Controller Fast Class By Spring CGLI Baefd 371 e" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="836" />
        <entry key="ENGLISH" value="837" />
        <entry key="ARABIC" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="FILIPINO" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="HMONG" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="YORUBA" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1656897881727" />
  </component>
</application>
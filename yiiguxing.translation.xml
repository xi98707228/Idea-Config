<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="1000" />
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <histories>
      <item value="get Field Name List" />
      <item value="bordered" />
      <item value="option" />
      <item value="value" />
      <item value="handle Type" />
      <item value="initialization Event" />
      <item value="abnormal" />
      <item value="if Changed" />
      <item value="search Title" />
      <item value="规范输入数值" />
      <item value="abnormal Handle" />
      <item value="阈值" />
      <item value="number" />
      <item value="placeholder" />
      <item value="integer" />
      <item value="i Check" />
      <item value="td" />
      <item value="tbody" />
      <item value="button" />
      <item value="table Exist" />
      <item value="处理方式" />
      <item value="data Handle Vo" />
      <item value="dispatcher Service" />
      <item value="to JSON String" />
      <item value="JSON" />
      <item value="result Vo" />
      <item value="field Name Array" />
      <item value="Data Handle Vo" />
      <item value="超越极限则为异常" />
      <item value="compare Beyond To Limit" />
      <item value="record Error Index" />
      <item value="compare Value" />
      <item value="This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class's &lt;i&gt;natural ordering&lt;i&gt;, and the class's &lt;tt&gt;compareTo&lt;tt&gt; method is referred to as its &lt;i&gt;natural comparison method&lt;i&gt;.&lt;p&gt; Lists (and arrays) of objects that implement this interface can be sorted automatically by {@link Collectionssort(List) Collections.sort} (and {@link Arrayssort(Object[]) Arrays.sort}). Objects that implement this interface can be used as keys in a {@linkplain SortedMap sorted map} or as elements in a {@linkplain SortedSet sorted set}, without the need to specify a {@linkplain Comparator comparator}.&lt;p&gt; The natural ordering for a class &lt;tt&gt;C&lt;tt&gt; is said to be &lt;i&gt;consistent with equals&lt;i&gt; if and only if &lt;tt&gt;e1.compareTo(e2) == 0&lt;tt&gt; has the same boolean value as &lt;tt&gt;e1.equals(e2)&lt;tt&gt; for every &lt;tt&gt;e1&lt;tt&gt; and &lt;tt&gt;e2&lt;tt&gt; of class &lt;tt&gt;C&lt;tt&gt;. Note that &lt;tt&gt;null&lt;tt&gt; is not an instance of any class, and &lt;tt&gt;e.compareTo(null)&lt;tt&gt; should throw a &lt;tt&gt;NullPointerException&lt;tt&gt; even though &lt;tt&gt;e.equals(null)&lt;tt&gt; returns &lt;tt&gt;false&lt;tt&gt;.&lt;p&gt; It is strongly recommended (though not required) that natural orderings be consistent with equals. This is so because sorted sets (and sorted maps) without explicit comparators behave &quot;strangely&quot; when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the &lt;tt&gt;equals&lt;tt&gt; method.&lt;p&gt; For example, if one adds two keys &lt;tt&gt;a&lt;tt&gt; and &lt;tt&gt;b&lt;tt&gt; such that {@code (!a.equals(b) &amp;&amp; a.compareTo(b) == 0)} to a sorted set that does not use an explicit comparator, the second &lt;tt&gt;add&lt;tt&gt; operation returns false (and the size of the sorted set does not increase) because &lt;tt&gt;a&lt;tt&gt; and &lt;tt&gt;b&lt;tt&gt; are equivalent from the sorted set's perspective.&lt;p&gt; Virtually all Java core classes that implement &lt;tt&gt;Comparable&lt;tt&gt; have natural orderings that are consistent with equals. One exception is &lt;tt&gt;java.math.BigDecimal&lt;tt&gt;, whose natural ordering equates &lt;tt&gt;BigDecimal&lt;tt&gt; objects with equal values and different precisions (such as 4.0 and 4.00).&lt;p&gt; For the mathematically inclined, the &lt;i&gt;relation&lt;i&gt; that defines the natural ordering on a given class C is:&lt;pre&gt; {(x, y) such that x.compareTo(y) &amp;lt;= 0}. &lt;pre&gt; The &lt;i&gt;quotient&lt;i&gt; for this total order is: &lt;pre&gt; {(x, y) such that x.compareTo(y) == 0}. &lt;pre&gt; It follows immediately from the contract for &lt;tt&gt;compareTo&lt;tt&gt; that the quotient is an &lt;i&gt;equivalence relation&lt;i&gt; on &lt;tt&gt;C&lt;tt&gt;, and that the natural ordering is a &lt;i&gt;total order&lt;i&gt; on &lt;tt&gt;C&lt;tt&gt;. When we say that a class's natural ordering is &lt;i&gt;consistent with equals&lt;i&gt;, we mean that the quotient for the natural ordering is the equivalence relation defined by the class's {@link Objectequals(Object) equals(Object)} method:&lt;pre&gt; {(x, y) such that x.equals(y)}. &lt;pre&gt;&lt;p&gt; This interface is a member of the &lt;a href=&quot;{@docRoot}..technotesguidescollectionsindex.html&quot;&gt; Java Collections Framework&lt;a&gt;. @param &lt;T&gt; the type of objects that this object may be compared to" />
      <item value="Josh Bloch" />
      <item value="Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this {@code String} object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this {@code String} object lexicographically precedes the argument string. The result is a positive integer if this {@code String} object lexicographically follows the argument string. The result is zero if the strings are equal; {@code compareTo} returns {@code 0} exactly when the {@link equals(Object)} method would return {@code true}. &lt;p&gt; This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let &lt;i&gt;k&lt;i&gt; be the smallest such index; then the string whose character at position &lt;i&gt;k&lt;i&gt; has the smaller value, as determined by using the &amp;lt; operator, lexicographically precedes the other string. In this case, {@code compareTo} returns the difference of the two character values at position {@code k} in the two string -- that is, the value: &lt;blockquote&gt;&lt;pre&gt; this.charAt(k)-anotherString.charAt(k) &lt;pre&gt;&lt;blockquote&gt; If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, {@code compareTo} returns the difference of the lengths of the strings -- that is, the value: &lt;blockquote&gt;&lt;pre&gt; this.length()-anotherString.length() &lt;pre&gt;&lt;blockquote&gt;" />
      <item value="Helper class that contains algorithms taken from JDK that additionally tracks the permutation that's created thorough the process" />
      <item value="Merge sort from Oracle JDK 6" />
      <item value="verify Effective" />
      <item value="left Threshold" />
      <item value="limit" />
      <item value="compare Result" />
      <item value="compare To" />
      <item value="待确认值" />
      <item value="本次比较阈值" />
      <item value="is Up" />
      <item value="boolean" />
      <item value="Math" />
      <item value="execute Calculate" />
      <item value="column Resolver Data" />
      <item value="double To Raw Long Bits" />
      <item value="Array List" />
      <item value="result Column Data" />
      <item value="column Value" />
      <item value="start Index" />
      <item value="start Value" />
      <item value="end Index" />
      <item value="end Value" />
      <item value="false" />
      <item value="border Operate" />
      <item value="process End Flag" />
      <item value="column Size" />
      <item value="最可能为总容量的" />
      <item value="出问题的概率" />
      <item value="Column Resolver Data" />
      <item value="column Values" />
      <item value="column Of Data" />
      <item value="column Of Data List" />
      <item value="Column Of Data" />
      <item value="size" />
      <item value="String" />
      <item value="column Name" />
      <item value="column Value Error Index" />
      <item value="Calculate" />
      <item value="System" />
      <item value="args" />
      <item value="Arrays" />
      <item value="as List" />
      <item value="objects List" />
      <item value="abc" />
      <item value="split" />
      <item value="query Data For Fields" />
      <item value="get Select Fields" />
      <item value="Jdbc Util" />
      <item value="ABNORMAL VALUE" />
      <item value="数据标准化处理" />
      <item value="get Left Threshold" />
      <item value="get Handle Type" />
      <item value="Data Handle Type" />
      <item value="forward Page Param" />
      <item value="res Map" />
      <item value="else" />
      <item value="Exception" />
      <item value="get Message" />
      <item value="data Handle Abnormal Vo" />
      <item value="Request Mapping" />
      <item value="Request Method" />
      <item value="print Stack Trace" />
      <item value="Hash Map" />
      <item value="model" />
      <item value="handle Data" />
      <item value="DATA NORMALIZATION" />
      <item value="数据表名称" />
      <item value="table Name" />
      <item value="select Fields" />
      <item value="handle" />
      <item value="TIME DELAY LENGTH" />
      <item value="Data Handle Dispatcher Service" />
      <item value="Application Context Aware" />
      <item value="Application Context" />
      <item value="set Application Context" />
      <item value="bean Name" />
      <item value="load Current Tag Plugin" />
      <item value="function" />
      <item value="field Name Position" />
      <item value="original List" />
      <item value="for Each" />
      <item value="leet Code Reduce Method" />
      <item value="current List" />
      <item value="javascript" />
      <item value="append" />
      <item value="none" />
      <item value="load Frame Plugins" />
      <item value="load Plugin Counter" />
      <item value="interval Load Plugin" />
      <item value="currrent List" />
      <item value="diff Vo" />
      <item value="field Name List" />
      <item value="ready" />
      <item value="Xml Bean Definition Reader" />
      <item value="数据处理方法" />
      <item value="结果" />
      <item value="POST" />
      <item value="data" />
      <item value="Response Body" />
      <item value="message" />
      <item value="Connection timed out: connect" />
      <item value="header Field List" />
      <item value="import Excel Data List" />
      <item value="data List" />
      <item value="bean Dest" />
      <item value="Finalize" />
      <item value="Split Relation Config" />
      <item value="SPLIT TABLE FIELD THRESHOLD" />
      <item value="batch Execute Split Insert Data Base Values" />
      <item value="close Component" />
      <item value="execute Data Base Thread Pool" />
      <item value="get Key" />
      <item value="table Fields Map" />
      <item value="customconfigurationquery" />
      <item value="table Fields" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="7688" />
        <entry key="ENGLISH" value="7689" />
        <entry key="ALBANIAN" value="3" />
        <entry key="ARABIC" value="3" />
        <entry key="IRISH" value="2" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="3" />
        <entry key="AFRIKAANS" value="3" />
        <entry key="DANISH" value="18" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="2" />
        <entry key="FRISIAN" value="1" />
        <entry key="HAITIAN_CREOLE" value="2" />
        <entry key="DUTCH" value="3" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="2" />
        <entry key="LATIN" value="19" />
        <entry key="LATVIAN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="4" />
        <entry key="ROMANIAN" value="5" />
        <entry key="MALAGASY" value="4" />
        <entry key="MALTESE" value="4" />
        <entry key="MARATHI" value="1" />
        <entry key="MAORI" value="1" />
        <entry key="HMONG" value="2" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="4" />
        <entry key="PORTUGUESE" value="12" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="WELSH" value="2" />
        <entry key="UZBEK" value="2" />
        <entry key="SPANISH" value="13" />
        <entry key="HAWAIIAN" value="2" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="10" />
        <entry key="HINDI" value="13" />
        <entry key="INDONESIAN" value="4" />
        <entry key="JAVANESE" value="1" />
        <entry key="YORUBA" value="1" />
        <entry key="VIETNAMESE" value="6" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1664155813481" />
  </component>
  <component name="Settings">
    <option name="showActionsInContextMenuOnlyWithSelection" value="false" />
  </component>
</application>
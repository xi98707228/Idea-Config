<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="No Such Method Exception" />
      <item value="Method Not Allowed Exception" />
      <item value="Abstract Method Error" />
      <item value="Byte Array Input Stream" />
      <item value="receive Data" />
      <item value="verify Done" />
      <item value="public" />
      <item value="slice Handler" />
      <item value="handler Part" />
      <item value="Thread Pool Executor" />
      <item value="executor Service" />
      <item value="take" />
      <item value="A {@linkplain BlockingQueue blocking queue} in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. A synchronous queue does not have any internal capacity, not even a capacity of one. You cannot {@code peek} at a synchronous queue because an element is only present when you try to remove it; you cannot insert an element (using any method) unless another thread is trying to remove it; you cannot iterate as there is nothing to iterate. The &lt;em&gt;head&lt;em&gt; of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and {@code poll()} will return {@code null}. For purposes of other {@code Collection} methods (for example {@code contains}), a {@code SynchronousQueue} acts as an empty collection. This queue does not permit {@code null} elements. &lt;p&gt;Synchronous queues are similar to rendezvous channels used in CSP and Ada. They are well suited for handoff designs, in which an object running in one thread must sync up with an object running in another thread in order to hand it some information, event, or task. &lt;p&gt;This class supports an optional fairness policy for ordering waiting producer and consumer threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness set to {@code true} grants threads access in FIFO order. &lt;p&gt;This class and its iterator implement all of the &lt;em&gt;optional&lt;em&gt; methods of the {@link Collection} and {@link Iterator} interfaces. &lt;p&gt;This class is a member of the &lt;a href=&quot;{@docRoot}..technotesguidescollectionsindex.html&quot;&gt; Java Collections Framework&lt;a&gt;." />
      <item value="Synchronous Queue" />
      <item value="Doug Lea" />
      <item value="Bill Scherer" />
      <item value="Michael Scott" />
      <item value="Doug Lea and Bill Scherer and Michael Scott" />
      <item value="access" />
      <item value="slice Handler Access Token" />
      <item value="Override" />
      <item value="receive Slice Data" />
      <item value="Concurrent Reference Hash Map" />
      <item value="Objenesis" />
      <item value="Spring Objenesis" />
      <item value="Handler Prototype Storage" />
      <item value="IO Exception" />
      <item value="Parallel Sorter" />
      <item value="Abstract Intercept Field Callback" />
      <item value="Useful unit data types." />
      <item value="Storage Abstract Handler" />
      <item value="Handler Zero Copy Storage" />
      <item value="Spring Application" />
      <item value="File Output Stream" />
      <item value="Input Stream" />
      <item value="example" />
      <item value="Storage Input File Require Is A File" />
      <item value="Field Writer Bool Val" />
      <item value="receive" />
      <item value="result" />
      <item value="示例区" />
      <item value="500" />
      <item value="987072248" />
      <item value="author" />
      <item value="切片填充" />
      <item value="qq" />
      <item value="Slice Abstract Handler" />
      <item value="Handler Slice File Fill" />
      <item value="storage Input Stream" />
      <item value="return" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="5598" />
        <entry key="ENGLISH" value="5599" />
        <entry key="ALBANIAN" value="3" />
        <entry key="ARABIC" value="3" />
        <entry key="IRISH" value="2" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="3" />
        <entry key="AFRIKAANS" value="3" />
        <entry key="DANISH" value="14" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="2" />
        <entry key="FRISIAN" value="1" />
        <entry key="HAITIAN_CREOLE" value="2" />
        <entry key="DUTCH" value="3" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="2" />
        <entry key="LATIN" value="17" />
        <entry key="LATVIAN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="4" />
        <entry key="ROMANIAN" value="5" />
        <entry key="MALAGASY" value="4" />
        <entry key="MALTESE" value="4" />
        <entry key="MARATHI" value="1" />
        <entry key="MAORI" value="1" />
        <entry key="HMONG" value="2" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="4" />
        <entry key="PORTUGUESE" value="9" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="ESPERANTO" value="1" />
        <entry key="SLOVAK" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="WELSH" value="2" />
        <entry key="UZBEK" value="2" />
        <entry key="SPANISH" value="8" />
        <entry key="HAWAIIAN" value="2" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="9" />
        <entry key="HINDI" value="11" />
        <entry key="INDONESIAN" value="4" />
        <entry key="JAVANESE" value="1" />
        <entry key="YORUBA" value="1" />
        <entry key="VIETNAMESE" value="5" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1662801903430" />
  </component>
</application>
<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="cost Order account" />
      <item value="init Handler Methods" />
      <item value="Engine Proc Userorg" />
      <item value="engine Proc User Org List" />
      <item value="Async Uncaught Exception Handler" />
      <item value="Async Annotation Advisor" />
      <item value="Unsafe mechanics" />
      <item value="put Ordered Object" />
      <item value="lazy Set Next" />
      <item value="compare And Swap Object" />
      <item value="try Push Stack" />
      <item value="Returns {@code true} if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return {@code true}. @return {@code true} if this task completed" />
      <item value="may Interrupt If Running" />
      <item value="A {@code Future} represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method {@code get} when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the {@code cancel} method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a {@code Future} for the sake of cancellability but not provide a usable result, you can declare types of the form {@code Future&lt;?&gt;} and return {@code null} as a result of the underlying task. &lt;p&gt; &lt;b&gt;Sample Usage&lt;b&gt; (Note that the following classes are all made-up.) &lt;pre&gt; {@code interface ArchiveSearcher { String search(String target); } class App { ExecutorService executor = ... ArchiveSearcher searcher = ... void showSearch(final String target) throws InterruptedException { Future&lt;String&gt; future = executor.submit(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }}); displayOtherThings(); do other things while searching try { displayText(future.get()); use future } catch (ExecutionException ex) { cleanup(); return; } } }}&lt;pre&gt; The {@link FutureTask} class is an implementation of {@code Future} that implements {@code Runnable}, and so may be executed by an {@code Executor}. For example, the above construction with {@code submit} could be replaced by: &lt;pre&gt; {@code FutureTask&lt;String&gt; future = new FutureTask&lt;String&gt;(new Callable&lt;String&gt;() { public String call() { return searcher.search(target); }}); executor.execute(future);}&lt;pre&gt; &lt;p&gt;Memory consistency effects: Actions taken by the asynchronous computation &lt;a href=&quot;package-summary.htmlMemoryVisibility&quot;&gt; &lt;i&gt;happen-before&lt;i&gt;&lt;a&gt; actions following the corresponding {@code Future.get()} in another thread." />
      <item value="Runnable Future" />
      <item value="See the internal documentation of class ForkJoinPool for a general implementation overview. ForkJoinTasks are mainly responsible for maintaining their &quot;status&quot; field amidst relays to methods in ForkJoinWorkerThread and ForkJoinPool. The methods of this class are more-or-less layered into (1) basic status maintenance (2) execution and awaiting completion (3) user-level methods that additionally report results. This is sometimes hard to see because this file orders exported methods in a way that flows well in javadocs. The status field holds run control status bits packed into a single int to minimize footprint and to ensure atomicity (via CAS). Status is initially zero, and takes on nonnegative values until completed, upon which status (anded with DONE_MASK) holds value NORMAL, CANCELLED, or EXCEPTIONAL. Tasks undergoing blocking waits by other threads have the SIGNAL bit set. Completion of a stolen task with SIGNAL set awakens any waiters via notifyAll. Even though suboptimal for some purposes, we use basic builtin waitnotify to take advantage of &quot;monitor inflation&quot; in JVMs that we would otherwise need to emulate to avoid adding further per-task bookkeeping overhead. We want these monitors to be &quot;fat&quot;, i.e., not use biasing or thin-lock techniques, so use some odd coding idioms that tend to avoid them, mainly by arranging that every synchronized block performs a wait, notifyAll or both. These control bits occupy only (some of) the upper half (16 bits) of status field. The lower bits are used for user-defined tags." />
      <item value="Fork Join Task" />
      <item value="Fork Join Pool" />
      <item value="Bi Relay" />
      <item value="Recursively constructs a tree of completions." />
      <item value="async Update Reimbursement Relationship Data List" />
      <item value="examine Personal Reimbursement Service" />
      <item value="target Object" />
      <item value="init Table Fields" />
      <item value="transport" />
      <item value="Examine Store Reimbursement Relationship" />
      <item value="Hibernate" />
      <item value="HV 000001" />
      <item value="socket" />
      <item value="background" />
      <item value="INFO" />
      <item value="Version" />
      <item value="Validator" />
      <item value="address" />
      <item value="examine Store Reimbursement Relationship Service" />
      <item value="Exception" />
      <item value="前端参数异常" />
      <item value="JSON Token" />
      <item value="Mybatis Default Parameter Handler" />
      <item value="set Attachment Result Ids" />
      <item value="save Attachment Ids" />
      <item value="String Scope Utils" />
      <item value="Bean Utils" />
      <item value="set Update Time" />
      <item value="set Act Id" />
      <item value="更新流程表单数据操作" />
      <item value="set Act Name" />
      <item value="copy Properties" />
      <item value="handler Ids Concat String" />
      <item value="get By Id" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="6535" />
        <entry key="ENGLISH" value="6536" />
        <entry key="ALBANIAN" value="7" />
        <entry key="ARABIC" value="1" />
        <entry key="BASQUE" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="6" />
        <entry key="POLISH" value="7" />
        <entry key="AFRIKAANS" value="8" />
        <entry key="DANISH" value="10" />
        <entry key="GERMAN" value="14" />
        <entry key="RUSSIAN" value="5" />
        <entry key="FRENCH" value="8" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="6" />
        <entry key="FRISIAN" value="3" />
        <entry key="HAITIAN_CREOLE" value="9" />
        <entry key="HAUSA" value="1" />
        <entry key="DUTCH" value="8" />
        <entry key="CATALAN" value="1" />
        <entry key="KURDISH" value="4" />
        <entry key="LATIN" value="10" />
        <entry key="LUXEMBOURGISH" value="3" />
        <entry key="KINYARWANDA" value="2" />
        <entry key="ROMANIAN" value="9" />
        <entry key="MALTESE" value="1" />
        <entry key="MALAYALAM" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="HMONG" value="4" />
        <entry key="NORWEGIAN" value="9" />
        <entry key="PORTUGUESE" value="10" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="6" />
        <entry key="SAMOAN" value="5" />
        <entry key="SESOTHO" value="3" />
        <entry key="SLOVAK" value="5" />
        <entry key="SLOVENIAN" value="3" />
        <entry key="SCOTS_GAELIC" value="1" />
        <entry key="SPANISH" value="2" />
        <entry key="GREEK" value="7" />
        <entry key="ITALIAN" value="13" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="5" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="7" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655691013219" />
  </component>
  <component name="Settings">
    <option name="showReplacementActionInContextMenu" value="true" />
    <option name="translateDocumentation" value="true" />
  </component>
</application>
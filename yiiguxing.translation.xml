<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <histories>
      <item value="module" />
      <item value="recompiling" />
      <item value="plugin" />
      <item value="compiler" />
      <item value="compile" />
      <item value="default" />
      <item value="njdt jx server" />
      <item value="Changes" />
      <item value="detected" />
      <item value="default Value" />
      <item value="item Hours" />
      <item value="get Instance" />
      <item value="Calendar" />
      <item value="MINUTE" />
      <item value="of Nullable" />
      <item value="num Total" />
      <item value="HOUR OF DAY" />
      <item value="MILLISECOND" />
      <item value="time Fs" />
      <item value="Final Array List" />
      <item value="map" />
      <item value="Leet_4_Median Of Two Sorted Arrays" />
      <item value="Indicates a public API that can change at any time, and has no guarantee of API stability and backward-compatibility. &lt;p&gt;Usage guidelines: &lt;ol&gt; &lt;li&gt;This annotation is used only on public API. Internal interfaces should not use it. &lt;li&gt;This annotation should only be added to new APIs. Adding it to an existing API is considered API-breaking. &lt;li&gt;Removing this annotation from an API gives it stable status. &lt;ol&gt;" />
      <item value="Payload" />
      <item value="not Empty" />
      <item value="not Full" />
      <item value="Concurrency control uses the classic two-condition algorithm found in any textbook." />
      <item value="Yml Change Parser" />
      <item value="ignore Expire Event" />
      <item value="SEQUENCE" />
      <item value="Atomic Long" />
      <item value="Subscriber" />
      <item value="get Secret Key" />
      <item value="get Access Key" />
      <item value="add Shutdown Hook" />
      <item value="get Suitable Thread Count" />
      <item value="latch Await" />
      <item value="count Down" />
      <item value="interrupted" />
      <item value="object Wait" />
      <item value="THREAD MULTIPLER" />
      <item value="Http Client Bean Holder" />
      <item value="Serializability of a class is enabled by the class implementing the java.io.Serializable interface. Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are themselves serializable. The serialization interface has no methods or fields and serves only to identify the semantics of being serializable. &lt;p&gt; To allow subtypes of non-serializable classes to be serialized, the subtype may assume responsibility for saving and restoring the state of the supertype's public, protected, and (if accessible) package fields. The subtype may assume this responsibility only if the class it extends has an accessible no-arg constructor to initialize the class's state. It is an error to declare a class Serializable if this is not the case. The error will be detected at runtime. &lt;p&gt; During deserialization, the fields of non-serializable classes will be initialized using the public or protected no-arg constructor of the class. A no-arg constructor must be accessible to the subclass that is serializable. The fields of serializable subclasses will be restored from the stream. &lt;p&gt; When traversing a graph, an object may be encountered that does not support the Serializable interface. In this case the NotSerializableException will be thrown and will identify the class of the non-serializable object. &lt;p&gt; Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures: &lt;PRE&gt; private void writeObject(java.io.ObjectOutputStream out) throws IOException private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException; private void readObjectNoData() throws ObjectStreamException; &lt;PRE&gt; &lt;p&gt;The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject method can restore it. The default mechanism for saving the Object's fields can be invoked by calling out.defaultWriteObject. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. &lt;p&gt;The readObject method is responsible for reading from the stream and restoring the classes fields. It may call in.defaultReadObject to invoke the default mechanism for restoring the object's non-static and non-transient fields. The defaultReadObject method uses information in the stream to assign the fields of the object saved in the stream with the correspondingly named fields in the current object. This handles the case when the class has evolved to add new fields. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. &lt;p&gt;The readObjectNoData method is responsible for initializing the state of the object for its particular class in the event that the serialization stream does not list the given class as a superclass of the object being deserialized. This may occur in cases where the receiving party uses a different version of the deserialized instance's class than the sending party, and the receiver's version extends classes that are not extended by the sender's version. This may also occur if the serialization stream has been tampered; hence, readObjectNoData is useful for initializing deserialized objects properly despite a &quot;hostile&quot; or incomplete source stream. &lt;p&gt;Serializable classes that need to designate an alternative object to be used when writing an object to the stream should implement this special method with the exact signature: &lt;PRE&gt; ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException; &lt;PRE&gt;&lt;p&gt; This writeReplace method is invoked by serialization if the method exists and it would be accessible from a method defined within the class of the object being serialized. Thus, the method can have private, protected and package-private access. Subclass access to this method follows java accessibility rules. &lt;p&gt; Classes that need to designate a replacement when an instance of it is read from the stream should implement this special method with the exact signature. &lt;PRE&gt; ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException; &lt;PRE&gt;&lt;p&gt; This readResolve method follows the same invocation rules and accessibility rules as writeReplace.&lt;p&gt; The serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an {@link InvalidClassException}. A serializable class can declare its own serialVersionUID explicitly by declaring a field named &lt;code&gt;&quot;serialVersionUID&quot;&lt;code&gt; that must be static, final, and of type &lt;code&gt;long&lt;code&gt;: &lt;PRE&gt; ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L; &lt;PRE&gt; If a serializable class does not explicitly declare a serialVersionUID, then the serialization runtime will calculate a default serialVersionUID value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is &lt;em&gt;strongly recommended&lt;em&gt; that all serializable classes explicitly declare serialVersionUID values, since the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected &lt;code&gt;InvalidClassException&lt;code&gt;s during deserialization. Therefore, to guarantee a consistent serialVersionUID value across different java compiler implementations, a serializable class must declare an explicit serialVersionUID value. It is also strongly advised that explicit serialVersionUID declarations use the &lt;code&gt;private&lt;code&gt; modifier where possible, since such declarations apply only to the immediately declaring class--serialVersionUID fields are not useful as inherited members. Array classes cannot declare an explicit serialVersionUID, so they always have the default computed value, but the requirement for matching serialVersionUID values is waived for array classes." />
      <item value="Neal Gafter" />
      <item value="Josh Bloch" />
      <item value="One-way interoperability!" />
      <item value="Security Exception" />
      <item value="Hibernate" />
      <item value="Dispatcher Servlet" />
      <item value="Initializing" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="4205" />
        <entry key="ENGLISH" value="4206" />
        <entry key="ALBANIAN" value="2" />
        <entry key="ARABIC" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="3" />
        <entry key="POLISH" value="1" />
        <entry key="AFRIKAANS" value="6" />
        <entry key="DANISH" value="10" />
        <entry key="GERMAN" value="13" />
        <entry key="RUSSIAN" value="4" />
        <entry key="FRENCH" value="8" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="6" />
        <entry key="FRISIAN" value="1" />
        <entry key="HAITIAN_CREOLE" value="2" />
        <entry key="HAUSA" value="1" />
        <entry key="DUTCH" value="7" />
        <entry key="CATALAN" value="1" />
        <entry key="KURDISH" value="4" />
        <entry key="LATIN" value="7" />
        <entry key="ROMANIAN" value="6" />
        <entry key="MALAYALAM" value="1" />
        <entry key="BENGALI" value="1" />
        <entry key="HMONG" value="4" />
        <entry key="NORWEGIAN" value="7" />
        <entry key="PORTUGUESE" value="8" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SAMOAN" value="5" />
        <entry key="SESOTHO" value="2" />
        <entry key="SLOVAK" value="5" />
        <entry key="SLOVENIAN" value="3" />
        <entry key="SPANISH" value="2" />
        <entry key="GREEK" value="7" />
        <entry key="ITALIAN" value="6" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="5" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="6" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1652664507987" />
  </component>
  <component name="Settings">
    <option name="showReplacementActionInContextMenu" value="true" />
    <option name="translateDocumentation" value="true" />
  </component>
</application>
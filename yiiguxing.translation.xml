<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="tasks" />
      <item value="An object that executes submitted {@link Runnable} tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An {@code Executor} is normally used instead of explicitly creating threads. For example, rather than invoking {@code new Thread(new(RunnableTask())).start()} for each of a set of tasks, you might use: &lt;pre&gt; Executor executor = &lt;em&gt;anExecutor&lt;em&gt;; executor.execute(new RunnableTask1()); executor.execute(new RunnableTask2()); ... &lt;pre&gt; However, the {@code Executor} interface does not strictly require that execution be asynchronous. In the simplest case, an executor can run the submitted task immediately in the caller's thread: &lt;pre&gt; {@code class DirectExecutor implements Executor { public void execute(Runnable r) { r.run(); } }}&lt;pre&gt; More typically, tasks are executed in some thread other than the caller's thread. The executor below spawns a new thread for each task. &lt;pre&gt; {@code class ThreadPerTaskExecutor implements Executor { public void execute(Runnable r) { new Thread(r).start(); } }}&lt;pre&gt; Many {@code Executor} implementations impose some sort of limitation on how and when tasks are scheduled. The executor below serializes the submission of tasks to a second executor, illustrating a composite executor. &lt;pre&gt; {@code class SerialExecutor implements Executor { final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;Runnable&gt;(); final Executor executor; Runnable active; SerialExecutor(Executor executor) { this.executor = executor; } public synchronized void execute(final Runnable r) { tasks.offer(new Runnable() { public void run() { try { r.run(); } finally { scheduleNext(); } } }); if (active == null) { scheduleNext(); } } protected synchronized void scheduleNext() { if ((active = tasks.poll()) != null) { executor.execute(active); } } }}&lt;pre&gt; The {@code Executor} implementations provided in this package implement {@link ExecutorService}, which is a more extensive interface. The {@link ThreadPoolExecutor} class provides an extensible thread pool implementation. The {@link Executors} class provides convenient factory methods for these Executors. &lt;p&gt;Memory consistency effects: Actions in a thread prior to submitting a {@code Runnable} object to an {@code Executor} &lt;a href=&quot;package-summary.htmlMemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;i&gt;&lt;a&gt; its execution begins, perhaps in another thread." />
      <item value="Executor Service" />
      <item value="Executor" />
      <item value="get Row Id" />
      <item value="bean Dest" />
      <item value="parse Object" />
      <item value="promobj" />
      <item value="Req Cont Review" />
      <item value="get" />
      <item value="parameter Map" />
      <item value="to JSON String" />
      <item value="JSON" />
      <item value="String" />
      <item value="Request Body" />
      <item value="晚开始观看此书" />
      <item value="13336" />
      <item value="Engine Proc Inst" />
      <item value="engine Flow Service" />
      <item value="Clinton Begin Kazuki Shimizu" />
      <item value="statement Annotation Types" />
      <item value="The annotation type {@code java.lang.annotation.Repeatable} is used to indicate that the annotation type whose declaration it (meta-)annotates is &lt;em&gt;repeatable&lt;em&gt;. The value of {@code @Repeatable} indicates the &lt;em&gt;containing annotation type&lt;em&gt; for the repeatable annotation type." />
      <item value="Indicates the &lt;em&gt;containing annotation type&lt;em&gt; for the repeatable annotation type. @return the containing annotation type" />
      <item value="Repeatable" />
      <item value="embedded Value Resolver" />
      <item value="AUTO EXECUTE CRON" />
      <item value="987072248" />
      <item value="2022-08-10 16:52:58" />
      <item value="data" />
      <item value="interface" />
      <item value="search Interface Log" />
      <item value="主库数据源" />
      <item value="master" />
      <item value="url" />
      <item value="username" />
      <item value="password" />
      <item value="select Dict Data By Type" />
      <item value="Property Sourced Request Mapping Handler Mapping" />
      <item value="methods" />
      <item value="public" />
      <item value="============= public methods ===================" />
      <item value="start Monitor" />
      <item value="resource Entries" />
      <item value="Resource Status" />
      <item value="monitor" />
      <item value="resource Description" />
      <item value="resource Name" />
      <item value="zhfc local db" />
      <item value="jdbc" />
      <item value="mysql" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="3668" />
        <entry key="ENGLISH" value="3669" />
        <entry key="ALBANIAN" value="3" />
        <entry key="ARABIC" value="3" />
        <entry key="IRISH" value="1" />
        <entry key="ICELANDIC" value="3" />
        <entry key="AFRIKAANS" value="2" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="2" />
        <entry key="HAITIAN_CREOLE" value="2" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="1" />
        <entry key="LATIN" value="11" />
        <entry key="LATVIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="2" />
        <entry key="ROMANIAN" value="5" />
        <entry key="MALAGASY" value="1" />
        <entry key="MALTESE" value="2" />
        <entry key="MAORI" value="1" />
        <entry key="HMONG" value="1" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="PORTUGUESE" value="7" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="WELSH" value="2" />
        <entry key="UZBEK" value="2" />
        <entry key="SPANISH" value="6" />
        <entry key="HAWAIIAN" value="2" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="6" />
        <entry key="HINDI" value="4" />
        <entry key="INDONESIAN" value="4" />
        <entry key="JAVANESE" value="1" />
        <entry key="YORUBA" value="1" />
        <entry key="VIETNAMESE" value="4" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1659860808522" />
  </component>
</application>
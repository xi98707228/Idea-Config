<application>
  <component name="AppStorage">
    <histories>
      <item value="select List COUNT" />
      <item value="Resource Bundle" />
      <item value="String Manager" />
      <item value="select Dict Data By Type" />
      <item value="The two possible authentication types for a resource." />
      <item value="Authentication Type" />
      <item value="Finance Sell Invoice Relationship" />
      <item value="ID WORKER STR" />
      <item value="sequence Number" />
      <item value="Propagation" />
      <item value="rollback For" />
      <item value="Exception" />
      <item value="invoice" />
      <item value="add Sell Invoice Data Method" />
      <item value="success" />
      <item value="set Use Caches" />
      <item value="Given a URL that refers to a .properties file, load that file. This is done under an AccessController so that this method will succeed when this jarfile is privileged but the caller is not. This method must therefore remain private to avoid security issues. &lt;p&gt; {@code Null} is returned if the URL cannot be opened." />
      <item value="get Properties" />
      <item value="do Privileged" />
      <item value="destroy Bean" />
      <item value="Access Control Context" />
      <item value="Privileged Action" />
      <item value="Hierarchical Bean Factory" />
      <item value="Configurable Bean Factory" />
      <item value="Singleton Bean Registry" />
      <item value="set Autowire Candidate Resolver" />
      <item value="javax Inject Provider Class" />
      <item value="Provider" />
      <item value="Configurable Listable Bean Factory" />
      <item value="get Bean Factory" />
      <item value="Abstract Application Context" />
      <item value="Context Closed Event" />
      <item value="Eagerly load the ContextClosedEvent class to avoid weird classloader issues on application shutdown in WebLogic 8.1. (Reported by Dustin Woods.)" />
      <item value="Protocol Resolver" />
      <item value="No thread context class loader -&gt; use class loader of this class." />
      <item value="get Caller Class" />
      <item value="get Context Class Loader" />
      <item value="Abstract Refreshable Config Application Context" />
      <item value="load Bean Definitions" />
      <item value="validating" />
      <item value="Abstract Xml Application Context" />
      <item value="Persistence Exception Translation Interceptor" />
      <item value="True Class Filter" />
      <item value="Advice" />
      <item value="Thread-local instance of bea" />
      <item value="{@link ThreadLocal} subclass that exposes a specified name as {@link toString()} result (allowing for introspection)." />
      <item value="Thread Local Target Source" />
      <item value="Abstract Pointcut Advisor" />
      <item value="Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by &lt;code&gt;src&lt;code&gt; to the destination array referenced by &lt;code&gt;dest&lt;code&gt;. The number of components copied is equal to the &lt;code&gt;length&lt;code&gt; argument. The components at positions &lt;code&gt;srcPos&lt;code&gt; through &lt;code&gt;srcPos+length-1&lt;code&gt; in the source array are copied into positions &lt;code&gt;destPos&lt;code&gt; through &lt;code&gt;destPos+length-1&lt;code&gt;, respectively, of the destination array. &lt;p&gt; If the &lt;code&gt;src&lt;code&gt; and &lt;code&gt;dest&lt;code&gt; arguments refer to the same array object, then the copying is performed as if the components at positions &lt;code&gt;srcPos&lt;code&gt; through &lt;code&gt;srcPos+length-1&lt;code&gt; were first copied to a temporary array with &lt;code&gt;length&lt;code&gt; components and then the contents of the temporary array were copied into positions &lt;code&gt;destPos&lt;code&gt; through &lt;code&gt;destPos+length-1&lt;code&gt; of the destination array. &lt;p&gt; If &lt;code&gt;dest&lt;code&gt; is &lt;code&gt;null&lt;code&gt;, then a &lt;code&gt;NullPointerException&lt;code&gt; is thrown. &lt;p&gt; If &lt;code&gt;src&lt;code&gt; is &lt;code&gt;null&lt;code&gt;, then a &lt;code&gt;NullPointerException&lt;code&gt; is thrown and the destination array is not modified. &lt;p&gt; Otherwise, if any of the following is true, an &lt;code&gt;ArrayStoreException&lt;code&gt; is thrown and the destination is not modified: &lt;ul&gt; &lt;li&gt;The &lt;code&gt;src&lt;code&gt; argument refers to an object that is not an array. &lt;li&gt;The &lt;code&gt;dest&lt;code&gt; argument refers to an object that is not an array. &lt;li&gt;The &lt;code&gt;src&lt;code&gt; argument and &lt;code&gt;dest&lt;code&gt; argument refer to arrays whose component types are different primitive types. &lt;li&gt;The &lt;code&gt;src&lt;code&gt; argument refers to an array with a primitive component type and the &lt;code&gt;dest&lt;code&gt; argument refers to an array with a reference component type. &lt;li&gt;The &lt;code&gt;src&lt;code&gt; argument refers to an array with a reference component type and the &lt;code&gt;dest&lt;code&gt; argument refers to an array with a primitive component type. &lt;ul&gt; &lt;p&gt; Otherwise, if any of the following is true, an &lt;code&gt;IndexOutOfBoundsException&lt;code&gt; is thrown and the destination is not modified: &lt;ul&gt; &lt;li&gt;The &lt;code&gt;srcPos&lt;code&gt; argument is negative. &lt;li&gt;The &lt;code&gt;destPos&lt;code&gt; argument is negative. &lt;li&gt;The &lt;code&gt;length&lt;code&gt; argument is negative. &lt;li&gt;&lt;code&gt;srcPos+length&lt;code&gt; is greater than &lt;code&gt;src.length&lt;code&gt;, the length of the source array. &lt;li&gt;&lt;code&gt;destPos+length&lt;code&gt; is greater than &lt;code&gt;dest.length&lt;code&gt;, the length of the destination array. &lt;ul&gt; &lt;p&gt; Otherwise, if any actual component of the source array from position &lt;code&gt;srcPos&lt;code&gt; through &lt;code&gt;srcPos+length-1&lt;code&gt; cannot be converted to the component type of the destination array by assignment conversion, an &lt;code&gt;ArrayStoreException&lt;code&gt; is thrown. In this case, let &lt;b&gt;&lt;i&gt;k&lt;i&gt;&lt;b&gt; be the smallest nonnegative integer less than length such that &lt;code&gt;src[srcPos+&lt;code&gt;&lt;i&gt;k&lt;i&gt;&lt;code&gt;]&lt;code&gt; cannot be converted to the component type of the destination array; when the exception is thrown, source array components from positions &lt;code&gt;srcPos&lt;code&gt; through &lt;code&gt;srcPos+&lt;code&gt;&lt;i&gt;k&lt;i&gt;&lt;code&gt;-1&lt;code&gt; will already have been copied to destination array positions &lt;code&gt;destPos&lt;code&gt; through &lt;code&gt;destPos+&lt;code&gt;&lt;i&gt;k&lt;I&gt;&lt;code&gt;-1&lt;code&gt; and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.)" />
      <item value="Clone Not Supported Exception" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="159" />
        <entry key="ENGLISH" value="160" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="HMONG" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655556977798" />
  </component>
</application>
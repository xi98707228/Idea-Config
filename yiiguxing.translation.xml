<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="public" />
      <item value="Thread Pool Executor" />
      <item value="java" />
      <item value="Compute smallest power of 2 &gt; minCapacity" />
      <item value="ensure Capacity" />
      <item value="Gallop left until a[b+hint - ofs] &lt;= key &lt; a[b+hint - lastOfs]" />
      <item value="gallop Right" />
      <item value="Josh Bloch" />
      <item value="This is a near duplicate of {@link TimSort}, modified for use with arrays of objects that implement {@link Comparable}, instead of using explicit comparators." />
      <item value="The invariants still hold: pivot &gt;= all in [lo, left) and pivot &lt; all in [left, start), so pivot belongs at left. Note that if there are elements equal to pivot, left points to the first slot after them -- that's why this sort is stable. Slide elements over to make room for pivot." />
      <item value="binary Sort" />
      <item value="This is a near duplicate of {@link TimSort}, modified for use with arrays of objects that implement {@link Comparable}, instead of using explicit comparators. &lt;p&gt;If you are using an optimizing VM, you may find that ComparableTimSort offers no performance benefit over TimSort in conjunction with a comparator that simply returns {@code ((Comparable)first).compareTo(Second)}. If this is the case, you are better off deleting ComparableTimSort to eliminate the code duplication. (See Arrays.java for details.)" />
      <item value="Comparable Tim Sort" />
      <item value="QUICKSORT THRESHOLD" />
      <item value="Index run[i] is the start of i-th run (ascending or descending sequence)." />
      <item value="Use Quicksort on small arrays" />
      <item value="middle" />
      <item value="middle Value" />
      <item value="Move negative zeros to the beginning of the sub-range." />
      <item value="This class implements the Dual-Pivot Quicksort algorithm by Vladimir Yaroslavskiy, Jon Bentley, and Josh Bloch. The algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations. All exposed methods are package-private, designed to be invoked from public methods (in class Arrays) after performing any necessary array bounds checks and expanding parameters into the required forms." />
      <item value="quartiles" />
      <item value="Relay" />
      <item value="Dual Pivot Quicksort" />
      <item value="parallel Sort" />
      <item value="primitive" />
      <item value="Visitable" />
      <item value="V Paper" />
      <item value="run If Async Not Complete" />
      <item value="Handler Result Subscriber" />
      <item value="Coyote Input Stream" />
      <item value="Servlet Http Handler Adapter" />
      <item value="deprecation" />
      <item value="Facade class that wraps a Coyote request object. All methods are delegated to the wrapped request." />
      <item value="Request Facade" />
      <item value="rawtypes" />
      <item value="Suppress Warnings" />
      <item value="就是为了让原本不兼容的接口变成" />
      <item value="987072248" />
      <item value="Enumeration Iterator Adapter" />
      <item value="enumeration" />
      <item value="Iterable" />
      <item value="需要将旧版本中的枚举器" />
      <item value="迭代器方法" />
      <item value="和老版本的" />
      <item value="进行适配" />
      <item value="elements" />
      <item value="Completion Stage" />
      <item value="Exception thrown when an error or other exception is encountered in the course of completing a result or task." />
      <item value="Completion Exception" />
      <item value="Parameterized Type Reference" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="6349" />
        <entry key="ENGLISH" value="6350" />
        <entry key="ALBANIAN" value="3" />
        <entry key="ARABIC" value="3" />
        <entry key="IRISH" value="2" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="3" />
        <entry key="AFRIKAANS" value="3" />
        <entry key="DANISH" value="17" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="2" />
        <entry key="FRISIAN" value="1" />
        <entry key="HAITIAN_CREOLE" value="2" />
        <entry key="DUTCH" value="3" />
        <entry key="CATALAN" value="2" />
        <entry key="KANNADA" value="2" />
        <entry key="LATIN" value="18" />
        <entry key="LATVIAN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="4" />
        <entry key="ROMANIAN" value="5" />
        <entry key="MALAGASY" value="4" />
        <entry key="MALTESE" value="4" />
        <entry key="MARATHI" value="1" />
        <entry key="MAORI" value="1" />
        <entry key="HMONG" value="2" />
        <entry key="ZULU" value="1" />
        <entry key="NORWEGIAN" value="4" />
        <entry key="PORTUGUESE" value="11" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="1" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="WELSH" value="2" />
        <entry key="UZBEK" value="2" />
        <entry key="SPANISH" value="13" />
        <entry key="HAWAIIAN" value="2" />
        <entry key="HUNGARIAN" value="1" />
        <entry key="ITALIAN" value="10" />
        <entry key="HINDI" value="12" />
        <entry key="INDONESIAN" value="4" />
        <entry key="JAVANESE" value="1" />
        <entry key="YORUBA" value="1" />
        <entry key="VIETNAMESE" value="5" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663681503656" />
  </component>
</application>
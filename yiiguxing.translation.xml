<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="623" />
    <option name="newTranslationDialogY" value="342" />
    <histories>
      <item value="data Base Utils" />
      <item value="simple Diagram Resolver Builder" />
      <item value="execute Sql" />
      <item value="Simple Diagram Resolver Builder" />
      <item value="build Executor Sql" />
      <item value="Simple Diagram Builder" />
      <item value="executor Sql" />
      <item value="connection" />
      <item value="build Sql" />
      <item value="Connection" />
      <item value="获取按照类别组获取到的分类映射数据列表" />
      <item value="inside Collection Map" />
      <item value="Linked List" />
      <item value="get Series Group Data Map" />
      <item value="待执行解析的数据列表" />
      <item value="diagram Atomic Parts" />
      <item value="执行解析" />
      <item value="executor Resolver" />
      <item value="Executor Diagram Compute Result Vo" />
      <item value="add All" />
      <item value="config Title" />
      <item value="get Legend Data List" />
      <item value="inside Collection List" />
      <item value="put All" />
      <item value="Performs a &lt;a href=&quot;package-summary.htmlMutableReduction&quot;&gt;mutable reduction&lt;a&gt; operation on the elements of this stream. A mutable reduction is one in which the reduced value is a mutable result container, such as an {@code ArrayList}, and elements are incorporated by updating the state of the result rather than by replacing the result. This produces a result equivalent to: &lt;pre&gt;{@code R result = supplier.get(); for (T element : this stream) accumulator.accept(result, element); return result; }&lt;pre&gt; &lt;p&gt;Like {@link reduce(Object, BinaryOperator)}, {@code collect} operations can be parallelized without requiring additional synchronization. &lt;p&gt;This is a &lt;a href=&quot;package-summary.htmlStreamOps&quot;&gt;terminal operation&lt;a&gt;. @apiNote There are many existing classes in the JDK whose signatures are well-suited for use with method references as arguments to {@code collect()}. For example, the following will accumulate strings into an {@code ArrayList}: &lt;pre&gt;{@code List&lt;String&gt; asList = stringStream.collect(ArrayList::new, ArrayList::add, ArrayList::addAll); }&lt;pre&gt; &lt;p&gt;The following will take a stream of strings and concatenates them into a single string: &lt;pre&gt;{@code String concat = stringStream.collect(StringBuilder::new, StringBuilder::append, StringBuilder::append) .toString();" />
      <item value="combiner" />
      <item value="new" />
      <item value="Returns a {@code Collector} that accumulates the input elements into a new {@code List}. There are no guarantees on the type, mutability, serializability, or thread-safety of the {@code List} returned; if more control over the returned {@code List} is required, use {@link toCollection(Supplier)}. @param &lt;T&gt; the type of the input elements @return a {@code Collector} which collects all the input elements into a {@code List}, in encounter order" />
      <item value="left" />
      <item value="the result of the reduction" />
      <item value="@param combiner an &lt;a href=&quot;package-summary.htmlAssociativity&quot;&gt;associative&lt;a&gt;, &lt;a href=&quot;package-summary.htmlNonInterference&quot;&gt;non-interfering&lt;a&gt;, &lt;a href=&quot;package-summary.htmlStatelessness&quot;&gt;stateless&lt;a&gt; function for combining two values, which must be compatible with the accumulator function" />
      <item value="evaluate Sequential" />
      <item value="evaluate Parallel" />
      <item value="characteristics" />
      <item value="accumulator" />
      <item value="outside Collection List" />
      <item value="outside Collector List" />
      <item value="inside Collector List" />
      <item value="atomic Part" />
      <item value="outer" />
      <item value="initial Primary Data" />
      <item value="protected" />
      <item value="get Diagram Resolver Compute Result" />
      <item value="get Horizontal Axis List" />
      <item value="可见性分类列表" />
      <item value="获取X轴分类数据列表" />
      <item value="null" />
      <item value="Abstract Diagram Resolve Executor" />
      <item value="Diagram Atomic Part" />
      <item value="check Legality Of The Param" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="2568" />
        <entry key="ENGLISH" value="2569" />
        <entry key="ALBANIAN" value="1" />
        <entry key="ARABIC" value="2" />
        <entry key="ICELANDIC" value="1" />
        <entry key="AFRIKAANS" value="2" />
        <entry key="GERMAN" value="2" />
        <entry key="FRENCH" value="2" />
        <entry key="FILIPINO" value="2" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="DUTCH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="LATIN" value="6" />
        <entry key="LATVIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="2" />
        <entry key="ROMANIAN" value="3" />
        <entry key="MALAGASY" value="1" />
        <entry key="MALTESE" value="1" />
        <entry key="MAORI" value="1" />
        <entry key="HMONG" value="1" />
        <entry key="NORWEGIAN" value="3" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="SWEDISH" value="2" />
        <entry key="WELSH" value="2" />
        <entry key="UZBEK" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="HAWAIIAN" value="1" />
        <entry key="ITALIAN" value="6" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="4" />
        <entry key="YORUBA" value="1" />
        <entry key="VIETNAMESE" value="4" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1658996299585" />
  </component>
</application>